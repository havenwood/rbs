module RBS
  # Namespace instance represents a _prefix of module names_.
  # 
  #    vvvvvvvvvvvvvv  TypeName
  #    RBS::Namespace
  #    ^^^^^           Namespace
  #
  #    vvvvvvvvvv    TypeName
  #    RBS::Types
  #    ^^^^^         Namespace
  #
  #    vvvvvvvvvvvvvvvvv    TypeName
  #    RBS::Types::Union
  #    ^^^^^^^^^^^^         Namespace
  #
  # Note that `Namespace` is a RBS specific concept and there is no corresponding concept in Ruby.
  #
  # There are _absolute_ and _relative_ namespaces.
  #
  #    ::RBS::         # Absolute namespace
  #      RBS::         # Relative namespace
  #
  # It also defines two special namespaces.
  #
  #    ::              # _Root_ namespace
  #                    # _Empty_ namespace
  #
  class Namespace
    attr_reader path: Array[Symbol]

    def initialize: (path: Array[Symbol], absolute: bool) -> void

    # Returns new _empty_ namespace.
    def self.empty: () -> Namespace

    # Returns new _root_ namespace.
    def self.root: () -> Namespace

    # Concat two namespaces.
    #
    #   Foo:: + Bar::   # => Foo::Bar::
    #   ::Foo:: + Bar:: # => ::Foo::Bar::
    #
    # If `other` is an absolute namespace, it returns `other`.
    #
    #   Foo:: + ::Bar::  # =>  ::Bar::
    # 
    def +: (Namespace other) -> Namespace

    def append: (Symbol component) -> Namespace

    def parent: () -> Namespace

    def absolute?: () -> bool

    def relative?: () -> bool

    def absolute!: () -> Namespace

    def relative!: () -> Namespace

    def empty?: () -> bool

    def ==: (untyped other) -> bool

    alias eql? ==

    def hash: () -> Integer

    def split: () -> [Namespace, Symbol]?

    def to_s: () -> String

    def to_type_name: () -> TypeName

    def self.parse: (String string) -> Namespace

    # Iterate over Namespace for each element in ascending order.
    #
    # ```
    # Namespace.parse("::A::B::C").ascend {|ns| p ns }
    #   => ::A::B::C
    #   => ::A::B
    #   => ::A
    #   => ::(root)
    # ```
    def ascend: () { (Namespace) -> void } -> void
              | () -> Enumerator[Namespace, void]
  end
end
